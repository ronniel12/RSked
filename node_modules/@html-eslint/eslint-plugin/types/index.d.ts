export = plugin;
/**
 * @typedef {import("./rules")} AllRules
 * @typedef {import("./configs/recommended")} RecommendedConfig
 */
/**
 * @type {{rules: AllRules, configs: {recommended: RecommendedConfig, "flat/recommended": import("eslint").Linter.FlatConfig }}}
 */
declare const plugin: {
    rules: AllRules;
    configs: {
        recommended: RecommendedConfig;
        "flat/recommended": import("eslint").Linter.FlatConfig;
    };
};
declare namespace plugin {
    export { AllRules, RecommendedConfig };
}
type AllRules = {
    "require-lang": import("./types").RuleModule<[]>;
    "require-img-alt": import("./types").RuleModule<[import("./rules/require-img-alt").Option]>;
    "require-doctype": import("./types").RuleModule<[]>;
    "require-title": import("./types").RuleModule<[]>;
    "no-duplicate-id": import("./types").RuleModule<[]>;
    "no-inline-styles": import("./types").RuleModule<[]>;
    "no-multiple-h1": import("./types").RuleModule<[]>;
    "no-extra-spacing-attrs": import("./types").RuleModule<[import("./rules/no-extra-spacing-attrs").Option]>;
    "no-extra-spacing-text": import("./types").RuleModule<[import("./rules/no-extra-spacing-text").Option]>;
    "attrs-newline": import("./types").RuleModule<[import("./rules/attrs-newline").Option]>;
    "element-newline": import("./types").RuleModule<[import("./rules/element-newline").Option]>;
    "no-skip-heading-levels": import("./types").RuleModule<[]>;
    "require-li-container": import("./types").RuleModule<[]>;
    indent: import("./types").RuleModule<[import("./rules/indent/indent").Option1, import("./rules/indent/indent").Option2]>;
    quotes: import("./types").RuleModule<[import("./rules/quotes").Option]>;
    "id-naming-convention": import("./types").RuleModule<[import("./rules/id-naming-convention").Option1, import("./rules/id-naming-convention").Option2]>;
    "no-obsolete-tags": import("./types").RuleModule<[]>;
    "require-attrs": import("./types").RuleModule<import("./rules/require-attrs").Option[]>;
    "require-closing-tags": import("./types").RuleModule<[import("./rules/require-closing-tags").Option]>;
    "require-meta-description": import("./types").RuleModule<[]>;
    "require-frame-title": import("./types").RuleModule<[]>;
    "no-non-scalable-viewport": import("./types").RuleModule<[]>;
    "no-positive-tabindex": import("./types").RuleModule<[]>;
    "require-meta-viewport": import("./types").RuleModule<[]>;
    "require-meta-charset": import("./types").RuleModule<[]>;
    "no-target-blank": import("./types").RuleModule<[]>;
    "no-duplicate-attrs": import("./types").RuleModule<[]>;
    "no-abstract-roles": import("./types").RuleModule<[]>;
    "require-button-type": import("./types").RuleModule<[]>;
    "no-aria-hidden-body": import("./types").RuleModule<[]>;
    "no-multiple-empty-lines": import("./types").RuleModule<[import("./rules/no-multiple-empty-lines").Option]>;
    "no-accesskey-attrs": import("./types").RuleModule<[]>;
    "no-restricted-attrs": import("./types").RuleModule<import("./rules/no-restricted-attrs").Options>;
    "no-trailing-spaces": import("./types").RuleModule<[]>;
    "no-restricted-attr-values": import("./types").RuleModule<import("./rules/no-restricted-attr-values").Options>;
    "no-script-style-type": import("./types").RuleModule<[]>;
    "no-heading-inside-button": import("./types").RuleModule<[]>;
    "no-invalid-role": import("./types").RuleModule<[]>;
    "no-nested-interactive": import("./types").RuleModule<[]>;
    lowercase: import("./types").RuleModule<[]>;
    "require-open-graph-protocol": import("./types").RuleModule<[import("./rules/require-open-graph-protocol").Option]>;
    "require-form-method": import("./types").RuleModule<[]>;
    "sort-attrs": import("./types").RuleModule<[import("./rules/sort-attrs").Option]>;
    "prefer-https": import("./types").RuleModule<[]>;
    "require-input-label": import("./types").RuleModule<[]>;
    "max-element-depth": import("./types").RuleModule<[import("./rules/max-element-depth").Option]>;
    "require-explicit-size": import("./types").RuleModule<[import("./rules/require-explicit-size").Option]>;
    "use-baseline": import("./types").RuleModule<[import("./rules/use-baseline").Option]>;
};
type RecommendedConfig = {
    rules: {
        "@html-eslint/require-lang": string;
        "@html-eslint/require-img-alt": string;
        "@html-eslint/require-doctype": string;
        "@html-eslint/require-title": string;
        "@html-eslint/no-multiple-h1": string;
        "@html-eslint/no-extra-spacing-attrs": string;
        "@html-eslint/attrs-newline": string;
        "@html-eslint/element-newline": (string | {
            inline: string[];
        })[];
        "@html-eslint/no-duplicate-id": string;
        "@html-eslint/indent": string;
        "@html-eslint/require-li-container": string;
        "@html-eslint/quotes": string;
        "@html-eslint/no-obsolete-tags": string;
        "@html-eslint/require-closing-tags": string;
        "@html-eslint/no-duplicate-attrs": string;
        "@html-eslint/use-baseline": string;
    };
};
//# sourceMappingURL=index.d.ts.map