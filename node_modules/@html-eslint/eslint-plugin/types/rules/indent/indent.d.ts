declare namespace _exports {
    export { AnyNode, Line, Tag, RuleListener, Context, TemplateText, Token, SourceCode, Range, SourceLocation, TemplateLiteral, OpenTemplate, CloseTemplate, ScriptTag, StyleTag, AnyNodeOrLine, IndentType, MessageId, IndentOptionInfo, Option1, Option2, RuleModule };
}
declare const _exports: RuleModule;
export = _exports;
type AnyNode = import("@html-eslint/types").AnyNode;
type Line = import("../../types").Line;
type Tag = import("@html-eslint/types").Tag;
type RuleListener = import("../../types").RuleListener;
type Context = import("../../types").Context<any[]>;
type TemplateText = import("@html-eslint/types").TemplateText;
type Token = import("eslint").AST.Token;
type SourceCode = import("eslint").SourceCode;
type Range = import("eslint").AST.Range;
type SourceLocation = import("eslint").AST.SourceLocation;
type TemplateLiteral = import("@html-eslint/types").TemplateLiteral;
type OpenTemplate = import("@html-eslint/types").OpenTemplate;
type CloseTemplate = import("@html-eslint/types").CloseTemplate;
type ScriptTag = import("@html-eslint/types").ScriptTag;
type StyleTag = import("@html-eslint/types").StyleTag;
type AnyNodeOrLine = AnyNode | Line;
type IndentType = {
    TAB: "tab";
    SPACE: "space";
};
type MessageId = {
    WRONG_INDENT: "wrongIndent";
};
type IndentOptionInfo = {
    indentType: IndentType["TAB"] | IndentType["SPACE"];
    indentSize: number;
    indentChar: string;
};
type Option1 = "tab" | number;
type Option2 = {
    Attribute?: number | undefined;
    tagChildrenIndent?: Record<string, number> | undefined;
};
type RuleModule = import("../../types").RuleModule<[Option1, Option2]>;
//# sourceMappingURL=indent.d.ts.map